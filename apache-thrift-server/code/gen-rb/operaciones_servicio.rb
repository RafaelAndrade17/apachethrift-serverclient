#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'servicio_types'

module OperacionesServicio
  class Client
    include ::Thrift::Client

    def suma(numero1, numero2)
      send_suma(numero1, numero2)
      return recv_suma()
    end

    def send_suma(numero1, numero2)
      send_message('suma', Suma_args, :numero1 => numero1, :numero2 => numero2)
    end

    def recv_suma()
      result = receive_message(Suma_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma failed: unknown result')
    end

    def resta(numero1, numero2)
      send_resta(numero1, numero2)
      return recv_resta()
    end

    def send_resta(numero1, numero2)
      send_message('resta', Resta_args, :numero1 => numero1, :numero2 => numero2)
    end

    def recv_resta()
      result = receive_message(Resta_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta failed: unknown result')
    end

    def multiplicacion(numero1, numero2)
      send_multiplicacion(numero1, numero2)
      return recv_multiplicacion()
    end

    def send_multiplicacion(numero1, numero2)
      send_message('multiplicacion', Multiplicacion_args, :numero1 => numero1, :numero2 => numero2)
    end

    def recv_multiplicacion()
      result = receive_message(Multiplicacion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplicacion failed: unknown result')
    end

    def division(numero1, numero2)
      send_division(numero1, numero2)
      return recv_division()
    end

    def send_division(numero1, numero2)
      send_message('division', Division_args, :numero1 => numero1, :numero2 => numero2)
    end

    def recv_division()
      result = receive_message(Division_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'division failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_suma(seqid, iprot, oprot)
      args = read_args(iprot, Suma_args)
      result = Suma_result.new()
      result.success = @handler.suma(args.numero1, args.numero2)
      write_result(result, oprot, 'suma', seqid)
    end

    def process_resta(seqid, iprot, oprot)
      args = read_args(iprot, Resta_args)
      result = Resta_result.new()
      result.success = @handler.resta(args.numero1, args.numero2)
      write_result(result, oprot, 'resta', seqid)
    end

    def process_multiplicacion(seqid, iprot, oprot)
      args = read_args(iprot, Multiplicacion_args)
      result = Multiplicacion_result.new()
      result.success = @handler.multiplicacion(args.numero1, args.numero2)
      write_result(result, oprot, 'multiplicacion', seqid)
    end

    def process_division(seqid, iprot, oprot)
      args = read_args(iprot, Division_args)
      result = Division_result.new()
      result.success = @handler.division(args.numero1, args.numero2)
      write_result(result, oprot, 'division', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Suma_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUMERO1 = 1
    NUMERO2 = 2

    FIELDS = {
      NUMERO1 => {:type => ::Thrift::Types::DOUBLE, :name => 'numero1'},
      NUMERO2 => {:type => ::Thrift::Types::DOUBLE, :name => 'numero2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUMERO1 = 1
    NUMERO2 = 2

    FIELDS = {
      NUMERO1 => {:type => ::Thrift::Types::DOUBLE, :name => 'numero1'},
      NUMERO2 => {:type => ::Thrift::Types::DOUBLE, :name => 'numero2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUMERO1 = 1
    NUMERO2 = 2

    FIELDS = {
      NUMERO1 => {:type => ::Thrift::Types::DOUBLE, :name => 'numero1'},
      NUMERO2 => {:type => ::Thrift::Types::DOUBLE, :name => 'numero2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUMERO1 = 1
    NUMERO2 = 2

    FIELDS = {
      NUMERO1 => {:type => ::Thrift::Types::DOUBLE, :name => 'numero1'},
      NUMERO2 => {:type => ::Thrift::Types::DOUBLE, :name => 'numero2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

